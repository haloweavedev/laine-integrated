generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Practice {
  id                            String                         @id @default(cuid())
  clerkUserId                   String                         @unique
  name                          String?
  nexhealthSubdomain            String?
  nexhealthLocationId           String?
  webhookLastSyncAt             DateTime?
  webhookLastSuccessfulSyncAt   DateTime?
  webhookSyncErrorMsg           String?
  address                       String?
  acceptedInsurances            String?
  serviceCostEstimates          String?
  timezone                      String?
  lunchBreakStart               String?
  lunchBreakEnd                 String?
  minBookingBufferMinutes       Int?                           @default(60)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  appointmentTypes              AppointmentType[]
  callLogs                      CallLog[]
  nexhealthWebhookSubscriptions NexhealthWebhookSubscription[]
  assistantConfig               PracticeAssistantConfig?
  providers                     Provider[]
  toolLogs                      ToolLog[]
  savedOperatories              SavedOperatory[]
  savedProviders                SavedProvider[]
}

model SavedProvider {
  id                       String                            @id @default(cuid())
  practiceId               String
  providerId               String
  isActive                 Boolean                           @default(true)
  createdAt                DateTime                          @default(now())
  updatedAt                DateTime                          @updatedAt
  acceptedAppointmentTypes ProviderAcceptedAppointmentType[]
  assignedOperatories      ProviderOperatoryAssignment[]
  practice                 Practice                          @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  provider                 Provider                          @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([practiceId, providerId])
  @@map("saved_providers")
}

model ProviderAcceptedAppointmentType {
  id                String          @id @default(cuid())
  savedProviderId   String
  appointmentTypeId String
  createdAt         DateTime        @default(now())
  appointmentType   AppointmentType @relation("ProviderAcceptedTypes", fields: [appointmentTypeId], references: [id], onDelete: Cascade)
  savedProvider     SavedProvider   @relation(fields: [savedProviderId], references: [id], onDelete: Cascade)

  @@unique([savedProviderId, appointmentTypeId])
  @@map("provider_accepted_appointment_types")
}

model ProviderOperatoryAssignment {
  id               String         @id @default(cuid())
  savedProviderId  String
  savedOperatoryId String
  createdAt        DateTime       @default(now())
  savedOperatory   SavedOperatory @relation(fields: [savedOperatoryId], references: [id], onDelete: Cascade)
  savedProvider    SavedProvider  @relation(fields: [savedProviderId], references: [id], onDelete: Cascade)

  @@unique([savedProviderId, savedOperatoryId])
  @@map("provider_operatory_assignments")
}

model SavedOperatory {
  id                   String                        @id @default(cuid())
  practiceId           String
  nexhealthOperatoryId String
  name                 String
  isActive             Boolean                       @default(true)
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  assignedToProviders  ProviderOperatoryAssignment[]
  practice             Practice                      @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@unique([practiceId, nexhealthOperatoryId])
  @@map("saved_operatories")
}

model PracticeAssistantConfig {
  id              String   @id @default(cuid())
  practiceId      String   @unique
  vapiAssistantId String?  @unique
  voiceProvider   String   @default("11labs")
  voiceId         String   @default("burt")
  systemPrompt    String   @default("You are a helpful AI assistant for a dental practice. Your primary goal is to assist patients. Be polite and efficient.")
  firstMessage    String   @default("Hello! This is Laine from your dental office. How can I help you today?")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  practice        Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
}

model GlobalNexhealthWebhookEndpoint {
  id                  String   @id @default("singleton")
  nexhealthEndpointId String   @unique
  secretKey           String
  targetUrl           String
  isEnabled           Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model NexhealthWebhookSubscription {
  id                         String   @id @default(cuid())
  practiceId                 String
  nexhealthWebhookEndpointId String
  nexhealthSubscriptionId    String   @unique
  resourceType               String
  eventName                  String
  isActive                   Boolean  @default(true)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  practice                   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@unique([practiceId, resourceType, eventName])
}

model CallLog {
  id                            String    @id @default(cuid())
  vapiCallId                    String    @unique
  practiceId                    String
  callTimestampStart            DateTime?
  callStatus                    String?
  transcriptText                String?
  summary                       String?
  vapiTranscriptUrl             String?
  detectedIntent                String?
  nexhealthPatientId            String?
  bookedAppointmentNexhealthId  String?
  conversationState             Json?
  patientStatus                 String?
  originalPatientRequestForType String?
  assistantId                   String?
  endedReason                   String?
  callDurationSeconds           Int?
  cost                          Decimal?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  practice                      Practice  @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  toolLogs                      ToolLog[]
}

model ToolLog {
  id              String   @id @default(cuid())
  practiceId      String
  vapiCallId      String?
  toolName        String
  toolCallId      String
  arguments       String?
  result          String?
  success         Boolean
  error           String?
  executionTimeMs Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  practice        Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  callLog         CallLog? @relation(fields: [vapiCallId], references: [vapiCallId], onDelete: Cascade)

  @@index([practiceId, toolName])
  @@index([vapiCallId])
}

model AppointmentType {
  id                             String                            @id @default(cuid())
  practiceId                     String
  nexhealthAppointmentTypeId     String
  name                           String
  duration                       Int
  bookableOnline                 Boolean?
  spokenName                     String?
  check_immediate_next_available Boolean                           @default(false)
  keywords                       String?
  parentType                     String?
  parentId                       String?
  lastSyncError                  String?
  createdAt                      DateTime                          @default(now())
  updatedAt                      DateTime                          @updatedAt
  practice                       Practice                          @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  acceptedByProviders            ProviderAcceptedAppointmentType[] @relation("ProviderAcceptedTypes")

  @@unique([practiceId, nexhealthAppointmentTypeId])
}

model Provider {
  id                  String          @id @default(cuid())
  practiceId          String
  nexhealthProviderId String
  firstName           String?
  lastName            String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  practice            Practice        @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  savedByPractices    SavedProvider[]

  @@unique([practiceId, nexhealthProviderId])
}

model NexhealthTokenCache {
  id          String   @id @default("singleton")
  accessToken String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
